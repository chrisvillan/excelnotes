---- VBA ----

Form vs ActiveX Controls

- Forms are simple controls: assign macro, format controls
- ActiveX have more advance features: properties, mutliple event triggers

-------------


--Rows--
rn = rownum

\/ all inserts above rn 

Rows([rn]).Insert

Range("[rn]:[rn]").Insert
//rn can be different nums

Range("[cell]").EntireRow.Insert

--Color--
Range("[cell]").Interior.ColorIndex
//returns cell's color index

Range("[cell]").Font.ColorIndex
//Returns font color

--Font--
https://docs.microsoft.com/en-us/office/vba/api/excel.font(object)

Range("[cell]").Font.Strikethrough
//Returns True/False if strikethrough

--Copy--
Range("[cell1]").Copy Range("[cell2]")
//Copies cell1 and paste to cell2


--Loops--
For i=1 To 10
  ....
Next i

For Each wSheet in Worksheets
  ...
Next wSheet
//wSheet = object, Worksheets=objectset

Exit For 
//Exits for loop 


Do While i<10
...
Loop

Do
....
Loop While i<10

Do Until IsEmpty(Cells(i,1))
...
Loop
//stops until row is empty

Do
...
Loop Until IsEmpty(Cells(i,1))



------ARRAYS------
Function Test() As Variant
//Returns variant or array

Dim A([start] To [end]) As [DataType]
//Ex: Dim A(1 to 5) As String)

A(1) = "A"
A(2) = "B"
...
//Assigning array elements


Dim A( [start1] To [end1] , [start2] To [end2] ) As [DataType]
/Two dimensional array

---Appending to array----

ReDim Presevere A([num])
A[num] = [data]
// basic way to resize array and add

ReDim Preserve A(Ubound(A) + 1)
A(Ubound(A) = [data]
//Good way to set up loop to append

//BIG NOTE: Cannot change dimension of intialized array

Dim arr(1) As String
arr(0) = string1
arr(1) = string 2

Redim preserve arr(2)
//Gives error


----Using .net framework for arrays ----

Set A = CreateObject("System.Collections.ArrayList")
A.Add [data]
A.Add [data2]
...
A.Sort
A.Remove [data]
//Better way to store array and sort, remove





